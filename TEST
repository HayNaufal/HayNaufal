Bot = {}

Bot["brzz74"] = {
    webhookLink = "https://discord.com/api/webhooks/1006473835496878080/VjJz1Fm8hmfUZ_yS4x5YkJ5kkehpA4s1mlIWhJgmZGGjSLz-S-X_aalonlNI00H27rx_", -- Bot webhook link
    messageId = "1012851060408328342", -- Webhook message id
    startFrom = 1, -- Start from in world list
    worldList = {
        "YVDAI",
        "FCVQI",
        "ZLSQC",
        "KYXIY",
        "GGFIJ",
        "BPPFS",
        "UUVPB",
        "UUVPC",
        "UUVPI",
        "CCRYA",
    }, -- World list
    doorFarm = "QWERTYASD" -- Rotation world door id
}
Bot["brzz75"] = {
    webhookLink = "https://discord.com/api/webhooks/1006473835496878080/VjJz1Fm8hmfUZ_yS4x5YkJ5kkehpA4s1mlIWhJgmZGGjSLz-S-X_aalonlNI00H27rx_", -- Bot webhook link
    messageId = "1012851070361407529", -- Webhook message id
    startFrom = 1, -- Start from in world list
    worldList = {
        "FDQDI",
        "XMUOZ",
        "JKRIC",
        "JKRIG",
        "JKRIM",
        "DMTUQ",
        "BYANV",
        "FFHDB",
        "OEKLB",
        "AGKLO",
        "CFBGE",
    }, -- World list
    doorFarm = "QWERTYASD" -- Rotation world door id
}
Bot["bot3"] = {
    webhookLink = "https://discord.com/api/webhooks/", -- Bot webhook link
    messageId = "", -- Webhook message id
    startFrom = 1, -- Start from in world list
    worldList = {}, -- World list 
    doorFarm = "" -- Rotation world door id
}
Bot["bot4"] = {
    webhookLink = "https://discord.com/api/webhooks/", -- Bot webhook link
    messageId = "", -- Webhook message id
    startFrom = 1, -- Start from in world list
    worldList = {}, -- World list
    doorFarm = "" -- Rotation world door id
}

webhookLinkPack = "https://discord.com/api/webhooks/1013014596212248626/xJUSKYhIgGZCq_KdKgkbhJM9fmPaO7_MhKV_Vna_cOy50-EeIvfzIheNQNoQrs9wQkXS" -- Pack info webhook link
messageIdPack = "1013014706610515998" -- Pack info message id

webhookLinkSeed = "https://discord.com/api/webhooks/1013014596212248626/xJUSKYhIgGZCq_KdKgkbhJM9fmPaO7_MhKV_Vna_cOy50-EeIvfzIheNQNoQrs9wQkXS" -- Seed info webhook link
messageIdSeed = "1013014706610515998" -- Seed info message id

storageSeed, doorSeed, patokanSeed = "LUPISABO", "QWERTYASD", 16 -- Seed storage world name, door id, and patokan
storagePack, doorPack, patokanPack = "LUPISABO", "QWERTYASD", 20 -- Pack storage world name, door id, and patokan

doorConfig = true -- Set false if not using door id from bot config
doorFarm = "" -- Rotation world door id

customTile = false -- Set true if custom breaking pos
customX = 0 -- Custom breaking pos x
customY = 0 -- Custom breaking pos y

whitelist = {"tumpabrik"} -- Player that will be whitelisted

peopleEnter = "LEAVE" --[[
    Type :
    - BAN (auto ban)
    - LEAVE (auto leave)
    - NONE (do nothing)
]]

rejoinDelay = 10000 -- Delay of rejoining world after auto leave

separatePlant = true -- Set true if separate harvest and plant

blacklistTile = false -- Set true if blacklist tile
blacklist = {} -- Tile to blacklist

itmId = 4584 -- Block id
itmSeed = itmId + 1 -- Seed id

tileNumber = 1 -- Customable from 1 to 5
root = false -- Set true if harvesting max root
buyPNB = false -- Set true if buying and storing pack after each pnb
looping = true -- Set false if not looping world

pack = "World Lock" -- Pack name to display on webhook
packList = {242} -- List of pack id
packName = "world_lock" -- Pack name in store
packPrice = 2000 -- Pack price
packLimit = 200 -- Limit of buying pack before bp full

delayHarvest = 50 -- Harvesting delay
delayPlant = 70 -- Planting delay
delayPunch = 190 -- Punching delay
delayPlace = 130 -- Placing delay

randomJoin = false -- Set true if join random world after each rotation
randomWorld = {}

restartTime = false -- Set true if restart time of farm after looping
customShow = false -- Set true if showing only custom amount of world
showList = 3 -- Number of custom worlds to be shown

items = {
    {name = "World Lock", id = 242, emote = "<:world_lock:1011929928519925820>"},
    {name = "Pepper Tree", id = 4584, emote = "<:pepper_tree:1011930020836544522>"},
    {name = "Pepper Tree Seed", id = 4585, emote = "<:pepper_tree_seed:1011930051744374805>"}
} -- List of item info

goods = {itmId, itmSeed, 98, 18, 32, 6336, 9640} -- Items that wont be trashed (dont edit)

------------------ Dont Touch ------------------
list = {}
waktu = {}
waktu = {}
worlds = {}
tileBreak = {}
fossil = 0
profit = 0
listNow = 1
t = os.time()
start = Bot[getBot().name].startFrom
stop = #Bot[getBot().name].worldList
totalList = #Bot[getBot().name].worldList

for i = Bot[getBot().name].startFrom,#Bot[getBot().name].worldList do
    table.insert(worlds,Bot[getBot().name].worldList[i])
end

if looping then
    for i = 0,Bot[getBot().name].startFrom - 1 do
        table.insert(worlds,Bot[getBot().name].worldList[i])
    end
end

for _,pack in pairs(packList) do
    table.insert(goods,pack)
end

if doorConfig then
    doorWorlds = Bot[getBot().name].doorFarm
else
    doorWorlds = doorFarm
end

for i = math.floor(tileNumber/2),1,-1 do
    i = i * -1
    table.insert(tileBreak,i)
end

for i = 0, math.ceil(tileNumber/2) - 1 do
    table.insert(tileBreak,i)
end

table.insert(whitelist,getBot().name)

function tilePunch(x,y)
    for _,num in pairs(tileBreak) do
        if getTile(x - 1,y + num).fg ~= 0 or getTile(x - 1,y + num).bg ~= 0 then
            return true
        end
    end
    return false
end

function tilePlace(x,y)
    for _,num in pairs(tileBreak) do
        if getTile(x - 1,y + num).fg == 0 and getTile(x - 1,y + num).bg == 0 then
            return true
        end
    end
    return false
end

function bl()
    blist = {}
    for _,tile in pairs(getTiles()) do
        if tile.fg == 6 then
            doorX = tile.x
            doorY = tile.y
        end
    end
    for _,tile in pairs(blacklist) do
        table.insert(blist,{x = doorX + tile.x, y = doorY + tile.y})
    end
end

function check(x,y)
    for _,tile in pairs(blist) do
        if x == tile.x and y == tile.y then
            return false
        end
    end
    return true
end

function warp(world,id)
    while getBot().world ~= world:upper() do
        sendPacket(3,"action|join_request\nname|"..world:upper())
        sleep(5000)
    end
    while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
        sendPacket(3,"action|join_request\nname|"..world:upper().."|"..id:upper())
        sleep(1000)
    end
end

function waktuWorld()
    local str = ""
    if customShow then
        for i = showList,1,-1 do
            newList = listNow - i
            if newList <= 0 then
                newList = newList + totalList
            end
            str = str.."\n"..Bot[getBot().name].worldList[newList]:upper().." ( "..(waktu[Bot[getBot().name].worldList[newList]] or "?").." )"
        end
    else
        for _,world in pairs(Bot[getBot().name].worldList) do
            str = str.."\n"..world:upper().." ( "..(waktu[world] or "?").." )"
        end
    end
    return str
end

function includesString(table, string)
    for _,str in pairs(table) do
        if str:lower() == string:lower() then
            return true
        end
    end
    return false
end

function enter()
    if peopleEnter ~= "NONE" and #getPlayers() > 0 then
        for _,player in pairs(getPlayers()) do
            if not includesString(whitelist, player.name) then
                if peopleEnter == "BAN" then
                    say("/ban "..player.name:lower())
                    sleep(2000)
                elseif peopleEnter == "LEAVE" then
                    local x = math.floor(getBot().x / 32)
                    local y = math.floor(getBot().y / 32)
                    local world = getBot().world
                    sendPacket(3, "action|quit_to_exit")
                    sleep(100)
                    sleep(rejoinDelay)
                    warp(world,doorWorlds)
                    sleep(1000)
                    while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                        findPath(x,y)
                        sleep(100)
                    end
                end
            end
        end
    end
end

function waste()
    xx = math.floor(getBot().x / 32)
    yy = math.floor(getBot().y / 32)
    wastee = false
    for _,tile in pairs(getTiles()) do
        if tile.fg == 778 then
            wastee = true
            for j = -2,2 do
                for i = -1,1 do
                    if tile.x + i >= 0 and tile.x + i <= 99 and tile.y + j >= 0 and tile.y + j <= 53 and getTile(tile.x + i,tile.y + j).flags == 0 then
                        findPath(tile.x + i,tile.y + j)
                        sleep(100)
                        while getTile(tile.x,tile.y).fg == 778 do
                            punch(-i,-j)
                            sleep(200)
                        end
                    end
                    if getTile(tile.x,tile.y).fg == 0 then
                        break
                    end
                end
                if getTile(tile.x,tile.y).fg == 0 then
                    break
                end
            end
        end
    end
    if wastee then
        findPath(xx,yy)
        sleep(100)
    end
end

function botInfo(recon,info)
    te = os.time() - t
    if recon then
        content = "@everyone"
    else
        content = ""
    end
    local text = [[
        $webhookLink = "]]..Bot[getBot().name].webhookLink..[["
        $messageId = "]]..Bot[getBot().name].messageId..[["
        $start = "]]..start..[["
        $stop = "]]..stop..[["
        $hari = "]]..math.floor(te/86400)..[["
        $jam = "]]..math.floor(te%86400/3600)..[["
        $menit = "]]..math.floor(te%86400%3600/60)..[["
        $pack = "]]..pack..[["
        $profit = "]]..profit..[["
        $color = "]]..math.random(1111111,9999999)..[["
        $webHookUrl = "$webhookLink/messages/$messageId"
        $CPU = Get-WmiObject Win32_Processor | Measure-Object -Property LoadPercentage -Average | Select -ExpandProperty Average
        $CompObject =  Get-WmiObject -Class WIN32_OperatingSystem
        $Memory = ((($CompObject.TotalVisibleMemorySize - $CompObject.FreePhysicalMemory)*100)/ $CompObject.TotalVisibleMemorySize)
        $RAM = [math]::Round($Memory, 0)
        $thumbnailObject = @{
            url = "https://komikkamvret.com/wp-content/uploads/2021/04/Pus-Nyangami-Roger-1024x978.png"
        }
        $footerObject = @{
            text = "]]..os.date("!%a %b %d, %Y at %I:%M %p", os.time() + 7 * 60 * 60)..[["
        }
        $fieldArray = @(
            @{
                name = "<:pickaxe:1011931845065183313> Bot Info"
                value = "]]..info..[["
                inline = "false"
            }
            @{
                name = "<:birth_certificate:1011929949076193291> Bot Name"
                value = "]]..getBot().name..[["
                inline = "true"
            }
            @{
                name = "<:heart_monitor:1012587208902987776> Bot Status"
                value = "]]..getBot().status:upper()..[["
                inline = "true"
            }
            @{
                name = "<:gems:1011931178510602240> Bot Gems"
                value = "]]..findItem(112)..[["
                inline = "true"
            }
            @{
                name = "<:globe:1011929997679796254> World Name"
                value = "]]..getBot().world..[["
                inline = "true"
            }
            @{
                name = "<:growtopia_scroll:1011972982261944444> World Order"
                value = "$start / $stop"
                inline = "true"
            }
            @{
                name = "<:fossil_rock:1011972962573881464> World Fossil"
                value = "]]..fossil..[["
                inline = "true"
            }
            @{
                name = "<:shop_sign:1012590603172847648> Pack Name"
                value = "$pack"
                inline = "true"
            }
            @{
                name = "<:guest_book:1012588503466528869> Bot Profit"
                value = "$profit $pack"
                inline = "true"
            }
            @{
                name = "<:CPU:994981162588053565> CPU & RAM"
                value = "$CPU% | $RAM%"
                inline = "true"
            }
            @{
                name = "<:change_of_address:1012566655995490354> World List"
                value = "]]..waktuWorld()..[["
                inline = "false"
            }
            @{
                name = "<:growtopia_clock:1011929976628596746> Bot Uptime"
                value = "$hari Days $jam Hours $menit Minutes"
                inline = "false"
            }
        )
        $embedObject = @{
            title = "<:exclamation_sign:1011934940096630794> **BOT INFORMATION**"
            color = $color
            thumbnail = $thumbnailObject
            footer = $footerObject
            fields = $fieldArray
        }
        $embedArray = @($embedObject)
        $payload = @{
            content = "]]..content..[["
            embeds = $embedArray
        }
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Patch -ContentType 'application/json'
    ]]
    local file = io.popen("powershell -command -", "w")
    file:write(text)
    file:close()
end

function packInfo(ping,desc)
    if ping then
        webhookLinkk = webhookLinkPack
        messageIdd = messageIdPack
    else
        webhookLinkk = webhookLinkSeed
        messageIdd = messageIdSeed
    end
    local text = [[
        $webhookLink = "]]..webhookLinkk..[["
        $messageId = "]]..messageIdd..[["
        $webHookUrl = "$webhookLink/messages/$messageId"
        $description = "]]..desc..[["
        $color = "]]..math.random(111111,999999)..[["
        $thumbnailObject = @{
            url = "https://komikkamvret.com/wp-content/uploads/2021/04/Pus-Nyangami-Roger-1024x978.png"
        }
        $footerObject = @{
            text = "]]..os.date("!%a %b %d, %Y at %I:%M %p", os.time() + 7 * 60 * 60)..[["
        }
        $fieldArray = @(
            @{
                name = "Dropped Items"
                value = "]]..desc..[["
                inline = "false"
            }
        )
        $embedObject = @{
            title = "<:exclamation_sign:1011934940096630794> **PACK/SEED INFORMATION**"
            color = $color
            thumbnail = $thumbnailObject
            footer = $footerObject
            fields = $fieldArray
        }
        $embedArray = @($embedObject)
        $payload = @{
            embeds = $embedArray
        }
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Patch -ContentType 'application/json'
    ]]
    local file = io.popen("powershell -command -", "w")
    file:write(text)
    file:close()
end

function faceLeft()
    pkt = {}
    pkt.type = 0
    pkt.pos_x = getBot().x
    pkt.pos_y = getBot().y
    pkt.flags = 48
    sendPacketRaw(pkt)
end

function reconnect(world,id,x,y)
    if getBot().status ~= "online" then
        botInfo(true,"Reconnecting")
        sleep(100)
        while true do
            if getBot().status == "suspended" then
                botInfo(true,"Bot Suspended!")
                sleep(100)
                while true do
                    sleep(10000)
                end
            elseif getBot().status ~= "online" then
                connect()
                sleep(10000)
            end
            if getBot().status == "online" and getBot().world ~= world:upper() then
                sendPacket(3,"action|join_request\nname|"..world:upper())
                sleep(5000)
            end
            if getBot().status == "online" and getBot().world == world:upper() then
                while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
                    sendPacket(3,"action|join_request\nname|"..world:upper().."|"..id:upper())
                    sleep(1000)
                end
                if x and y then
                    while getBot().status == "online" and (math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y) do
                        findPath(x,y)
                        sleep(100)
                    end
                end
                break
            end
        end
        botInfo(true,"Succesfully Reconnected")
        sleep(100)
    end
end

function round(n)
    return n % 1 > 0.5 and math.ceil(n) or math.floor(n)
end

function tileDrop(x,y,num,ping)
    local count = 0
    local stack = 0
    for _,obj in pairs(getObjects()) do
        if math.floor(obj.x / 32) == x and math.floor(obj.y / 32) == y then
            count = count + obj.count
            stack = stack + 1
        end
    end
    if count <= (4000 - num) and (ping or stack < 20) then
        return true
    end
    return false
end

function storePack()
    for _,pack in pairs(packList) do
        for _,tile in pairs(getTiles()) do
            if tile.fg == patokanPack or tile.bg == patokanPack then
                if tileDrop(tile.x,tile.y,findItem(pack)) then
                    while math.floor(getBot().x / 32) ~= (tile.x + 1) or math.floor(getBot().y / 32) ~= tile.y do
                        findPath(tile.x + 1,tile.y)
                        sleep(100)
                        faceLeft()
                        sleep(100)
                    end
                    while findItem(pack) > 0 and tileDrop(tile.x,tile.y,findItem(pack)) do
                        sendPacket(2,"action|drop\n|itemID|"..pack)
                        sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..pack.."|\ncount|"..findItem(pack))
                        sleep(500)
                    end
                end
            end
            if findItem(pack) == 0 then
                break
            end
        end
    end
end

function itemInfo(ids)
    local result = {name = "null", id = ids, emote = "null"}
    for _,item in pairs(items) do
        if item.id == ids then
            result.name = item.name
            result.emote = item.emote
            return result
        end
    end
    return result
end

function infoPack()
    local store = {}
    for _,obj in pairs(getObjects()) do
        if store[obj.id] then
            store[obj.id].count = store[obj.id].count + obj.count
        else
            store[obj.id] = {id = obj.id, count = obj.count}
        end
    end
    local str = ""
    for _,object in pairs(store) do
        str = str.."\n"..itemInfo(object.id).emote.." "..itemInfo(object.id).name.." : "..object.count.."x"
    end
    return str
end

function storeSeed(world)
    collectSet(false,3)
    sleep(100)
    warp(storageSeed,doorSeed)
    sleep(100)
    for _,tile in pairs(getTiles()) do
        if tile.fg == patokanSeed or tile.bg == patokanSeed then
            if tileDrop(tile.x,tile.y,100,true) then
                while math.floor(getBot().x / 32) ~= (tile.x + 1) or math.floor(getBot().y / 32) ~= tile.y do
                    findPath(tile.x + 1,tile.y)
                    sleep(100)
                    faceLeft()
                    sleep(100)
                end
                while findItem(itmSeed) >= 100 and tileDrop(tile.x,tile.y,100,true) do
                    sendPacket(2,"action|drop\n|itemID|"..itmSeed)
                    sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..itmSeed.."|\ncount|100")
                    sleep(500)
                end
            end
            if findItem(itmSeed) < 100 then
                break
            end
        end
    end
    packInfo(false,infoPack())
    sleep(100)
    warp(world,doorWorlds)
    sleep(100)
    collectSet(true,3)
    sleep(100)
end

function buy()
    if findItem(112) >= packPrice then
        collectSet(false,3)
        sleep(100)
        warp(storagePack,doorPack)
        sleep(100)
        while findItem(112) >= packPrice do
            countBuy = 0
            botInfo(false,"Buying Pack")
            sleep(100)
            while findItem(112) >= packPrice and countBuy < packLimit do
                sendPacket(2,"action|buy\nitem|"..packName)
                sleep(500)
                profit = profit + 1
                countBuy = countBuy + 1
            end
            botInfo(false,"Storing Pack")
            sleep(100)
            storePack()
            sleep(100)
        end
        packInfo(true,infoPack())
        sleep(100)
    end
end

function includesNumber(table, number)
    for _,num in pairs(table) do
        if num == number then
            return true
        end
    end
    return false
end

function clear()
    for _,item in pairs(getInventory()) do
        if not includesNumber(goods, item.id) then
            sendPacket(2, "action|trash\n|itemID|"..item.id)
            sendPacket(2, "action|dialog_return\ndialog_name|trash_item\nitemID|"..item.id.."|\ncount|"..item.count) 
            sleep(200)
        end
    end
end

function pnb(world)
    if findItem(itmId) >= 5 then
        if not customTile then
            ex = 1
            ye = math.floor(getBot().y / 32)
            if ye > 40 then
                ye = ye - 10
            elseif ye < 11 then
                ye = ye + 10
            end
            if getTile(ex,ye).fg ~= 0 and getTile(ex,ye).fg ~= itmSeed then
                ye = ye - 1
            end
        else
            ex = customX
            ye = customY
        end
        while math.floor(getBot().x / 32) ~= ex or math.floor(getBot().y / 32) ~= ye do
            findPath(ex,ye)
            sleep(100)
        end
        while findItem(itmId) >= 5 and findItem(itmSeed) < 190 do
            while tilePlace(ex,ye) do
                for _,i in pairs(tileBreak) do
                    if getTile(ex - 1,ye + i).fg == 0 and getTile(ex - 1,ye + i).bg == 0 then
                        place(itmId,-1,i)
                        sleep(delayPlace)
                        enter()
                        waste()
                        reconnect(world,doorWorlds,ex,ye)
                    end
                end
            end
            while tilePunch(ex,ye) do
                for _,i in pairs(tileBreak) do
                    if getTile(ex - 1,ye + i).fg ~= 0 or getTile(ex - 1,ye + i).bg ~= 0 then
                        punch(-1,i)
                        sleep(delayPunch)
                        enter()
                        waste()
                        reconnect(world,doorWorlds,ex,ye)
                    end
                end
            end
            reconnect(world,doorWorlds,ex,ye)
        end
        clear()
        sleep(100)
        if separatePlant then
            plant(world)
            sleep(100)
        elseif findItem(itmSeed) >= 190 then
            botInfo(false,"Storing Seed")
            sleep(100)
            storeSeed(world)
            sleep(100)
            botInfo(false,"Farming")
            sleep(100)
        end
        if buyPNB and findItem(112) >= packPrice then
            buy()
            sleep(100)
            warp(world,doorWorlds)
            sleep(100)
            collectSet(true,3)
            sleep(100)
            botInfo(false,"Farming")
            sleep(100)
        end
    end
end

function take(world)
    collectSet(false,3)
    sleep(100)
    warp(storageSeed,doorSeed)
    sleep(100)
    for _,obj in pairs(getObjects()) do
        if obj.id == itmSeed then
            findPath(round(obj.x / 32),math.floor(obj.y / 32))
            sleep(1000)
            collect(2)
            sleep(1000)
        end
        if findItem(itmSeed) > 0 then
            break
        end
    end
    warp(world,doorWorlds)
    sleep(100)
    collectSet(true,3)
    sleep(100)
end

function plant(world)
    for _,tile in pairs(getTiles()) do
        if findItem(itmSeed) == 0 then
            botInfo(false,"Taking Seed")
            sleep(100)
            take(world)
            sleep(100)
            botInfo(false,"Farming")
            sleep(100)
        end
        if tile.flags ~= 0 and getTile(tile.x,tile.y - 1).fg == 0 then
            if not blacklistTile or check(tile.x,tile.y) then
                findPath(tile.x,tile.y - 1)
                while getTile(tile.x,tile.y - 1).fg == 0 do
                    place(itmSeed,0,0)
                    sleep(delayPlant)
                    enter()
                    waste()
                    reconnect(world,doorWorlds,tile.x,tile.y - 1)
                end
            end
        end
    end
    if findItem(itmSeed) >= 100 then
        botInfo(false,"Storing Seed")
        sleep(100)
        storeSeed(world)
        sleep(100)
        botInfo(false,"Farming")
        sleep(100)
    end
end

function harvest(world)
    botInfo(false,"Farming")
    sleep(100)
    if separatePlant then
        for _,tile in pairs(getTiles()) do
            if getTile(tile.x,tile.y - 1).ready and getTile(tile.x,tile.y - 1).fg == itmSeed then
                if not blacklistTile or check(tile.x,tile.y) then
                    findPath(tile.x,tile.y - 1)
                    while getTile(tile.x,tile.y - 1).fg == itmSeed do
                        punch(0,0)
                        sleep(delayHarvest)
                        enter()
                        waste()
                        reconnect(world,doorWorlds,tile.x,tile.y - 1)
                    end
                    if root then
                        countHit = 0
                        while getTile(tile.x, tile.y).fg == (itmId + 4) do
                            punch(0, 1)
                            sleep(delayHarvest)
                            enter()
                            waste()
                            countHit = countHit + 1
                            if countHit == 2 then
                                sleep(3000)
                                countHit = 0
                            end
                            reconnect(world,doorWorlds,tile.x,tile.y - 1)
                        end
                        clear()
                        sleep(100)
                    end
                end
            end
            if findItem(itmId) >= 190 then
                pnb(world)
                sleep(100)
            end
        end
    else
        for _,tile in pairs(getTiles()) do
            if findItem(itmSeed) == 0 then
                botInfo(false,"Taking Seed")
                sleep(100)
                take(world)
                sleep(100)
                botInfo(false,"Farming")
                sleep(100)
            end
            if tile.flags ~= 0 then
                if getTile(tile.x,tile.y - 1).ready or getTile(tile.x,tile.y - 1).fg == 0 then
                    if not blacklistTile or check(tile.x,tile.y) then
                        findPath(tile.x,tile.y - 1)
                        while getTile(tile.x,tile.y - 1).fg == itmSeed do
                            punch(0,0)
                            sleep(delayHarvest)
                            enter()
                            waste()
                            reconnect(world,doorWorlds,tile.x,tile.y - 1)
                        end
                        if root then
                            countHit = 0
                            while getTile(tile.x, tile.y).fg == (itmId + 4) do
                                punch(0, 1)
                                sleep(delayHarvest)
                                enter()
                                waste()
                                countHit = countHit + 1
                                if countHit == 2 then
                                    sleep(3000)
                                    countHit = 0
                                end
                                reconnect(world,doorWorlds,tile.x,tile.y - 1)
                            end
                            clear()
                            sleep(100)
                        end
                        while getTile(tile.x,tile.y - 1).fg == 0 do
                            place(itmSeed,0,0)
                            sleep(delayPlant)
                            enter()
                            waste()
                            reconnect(world,doorWorlds,tile.x,tile.y - 1)
                        end
                    end
                end
            end
            if findItem(itmId) >= 190 then
                pnb(world)
                sleep(100)
            end
        end
    end
end

function infoFossil()
    fossil = 0
    for _,tile in pairs(getTiles()) do
        if tile.fg == 3918 then
            fossil = fossil + 1
        end
    end
end

while true do
    for index,world in pairs(worlds) do
        if findItem(itmSeed) > 0 then
            warp(world,doorWorlds)
            sleep(100)
            collectSet(true,3)
            sleep(100)
        else
            botInfo(false,"Taking Seed")
            sleep(100)
            take(world)
            sleep(100)
        end
        botInfo(false,"Starting "..world)
        sleep(1000)
        tt = os.time()
        listNow = index
        bl()
        sleep(100)
        infoFossil()
        sleep(100)
        harvest(world)
        sleep(100)
        pnb(world)
        sleep(100)
        buy()
        sleep(100)
        tt = os.time() - tt
        botInfo(false,"Finished "..world)
        sleep(100)
        waktu[world] = math.floor(tt / 3600).." Hours "..math.floor(tt % 3600 / 60).." Minutes"
        if randomJoin then
            for _,v in pairs(randomWorld) do
                while getBot().world ~= v:upper() do
                    sendPacket(3,"action|join_request\nname|"..v:upper())
                    sleep(5000)
                end
            end
        end
        if start < stop then
            start = start + 1
        else
            if restartTime then
                waktu = {}
            end
            start = 1
        end
    end
    if not looping then
        botInfo(true,"Finished All World, Removing Bot !")
        sleep(100)
        removeBot(getBot().name)
        break
    end
end
